package com.omiyawaki.osrswiki.page

import android.annotation.SuppressLint
import android.content.Context
import android.graphics.Color
import android.util.Log
import android.webkit.ConsoleMessage
import android.webkit.WebChromeClient
import android.webkit.WebView
import com.omiyawaki.osrswiki.dataclient.WikiSite
import com.omiyawaki.osrswiki.theme.Theme

/**
 * Manages the configuration and rendering of content within the WebView.
 * It now loads a pre-constructed HTML document and applies dynamic theming.
 */
class PageWebViewManager(
    private val webView: WebView,
    private val linkHandler: PageLinkHandler,
    private val onPageReady: () -> Unit
) {
    private val webViewDebugTag = "WebViewConsole"
    private var currentTheme: Theme = Theme.DEFAULT_LIGHT

    init {
        setupWebView()
    }

    @SuppressLint("SetJavaScriptEnabled")
    private fun setupWebView() {
        webView.webViewClient = object : AppWebViewClient(linkHandler) {
            override fun onPageFinished(view: WebView?, url: String?) {
                super.onPageFinished(view, url)
                // When the initial HTML has been loaded, apply our dynamic theme and reveal the body.
                applyStylingAndRevealBody()
            }
        }
        webView.webChromeClient = object : WebChromeClient() {
            override fun onConsoleMessage(consoleMessage: ConsoleMessage?): Boolean {
                consoleMessage?.let {
                    val message = "[${it.sourceId()}:${it.lineNumber()}] ${it.message()}"
                    when (it.messageLevel()) {
                        ConsoleMessage.MessageLevel.ERROR -> Log.e(webViewDebugTag, message)
                        ConsoleMessage.MessageLevel.WARNING -> Log.w(webViewDebugTag, message)
                        else -> Log.i(webViewDebugTag, message)
                    }
                }
                return true
            }
        }
        webView.settings.javaScriptEnabled = true
        // Set a transparent background to prevent a white flash before the page loads.
        // The actual background color will be set by the loaded HTML/CSS.
        webView.setBackgroundColor(Color.TRANSPARENT)
    }

    /**
     * Renders a fully pre-constructed HTML document in the WebView.
     *
     * @param fullHtml The complete HTML document string (including scripts and styles).
     * @param baseUrl The base URL for resolving relative paths.
     * @param theme The theme to apply to the content.
     */
    fun render(fullHtml: String, baseUrl: String?, theme: Theme) {
        this.currentTheme = theme
        val finalBaseUrl = baseUrl ?: WikiSite.OSRS_WIKI.url()
        webView.loadDataWithBaseURL(finalBaseUrl, fullHtml, "text/html", "UTF-8", null)
    }

    /**
     * Applies the specific theme class to the body and makes it visible.
     * This is called from onPageFinished to prevent a Flash of Unstyled Content (FOUC).
     */
    private fun applyStylingAndRevealBody() {
        // The theme class is now added in PageHtmlBuilder. We just need to make the body visible.
        // The theme class is already on the body tag from the PageHtmlBuilder.
        // We just need to make it visible.
        val revealBodyJs = "(function() { document.body.style.visibility = 'visible'; })();"
        webView.evaluateJavascript(revealBodyJs) {
            // After revealing the body, we signal that the page is ready.
            onPageReady()
        }
    }
}

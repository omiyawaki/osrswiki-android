package com.omiyawaki.osrswiki.page

import android.content.Context
import java.io.BufferedReader
import java.io.InputStreamReader

class PageHtmlBuilder(private val context: Context) {

    private val wikiContentCss: String by lazy { readAsset("styles/wiki_content.css") }
    private val tablesortJs: String by lazy { readAsset("js/tablesort.min.js") }

    fun buildFullHtmlDocument(title: String, bodyContent: String): String {
        val finalTitle = if (title.isBlank()) "OSRS Wiki" else title
        // SVG icons for sorting arrows, using the same color as wiki links for consistency.
        val arrowUpSvg = "<svg xmlns='http://www.w3.org/2000/svg' width='10' height='10' viewBox='0 0 10 10'><path fill='%23936039' d='M5 0 L10 10 L0 10 Z'/></svg>"
        val arrowDownSvg = "<svg xmlns='http://www.w3.org/2000/svg' width='10' height='10' viewBox='0 0 10 10'><path fill='%23936039' d='M5 10 L10 0 L0 0 Z'/></svg>"

        return """
            <!DOCTYPE html>
            <html>
            <head>
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>${finalTitle}</title>
                <style>
                    ${wikiContentCss}
                </style>
                <style>
                    /* More robust SVG-based arrows for table sorting indicators. */
                    table.sortable th {
                        cursor: pointer;
                    }
                    table.sortable th.sort-up::after,
                    table.sortable th.sort-down::after {
                        content: '';
                        display: inline-block;
                        width: 10px;
                        height: 10px;
                        margin-left: 8px;
                        background-repeat: no-repeat;
                        background-position: center center;
                    }
                    table.sortable th.sort-up::after {
                        background-image: url("data:image/svg+xml,${arrowUpSvg}");
                    }
                    table.sortable th.sort-down::after {
                        background-image: url("data:image/svg+xml,${arrowDownSvg}");
                    }
                </style>
            </head>
            <body style="visibility: hidden;">
                $bodyContent
                <script>
                    ${tablesortJs}
                </script>
                <script>
                    document.addEventListener('DOMContentLoaded', function() {
                        // Find all sortable tables.
                        var sortableTables = document.querySelectorAll('table.wikitable.sortable');

                        sortableTables.forEach(function(table) {
                            // --- FIX 1: Ensure table has a THEAD element. ---
                            // The library requires a THEAD to distinguish headers from data.
                            if (!table.querySelector('thead')) {
                                var thead = document.createElement('thead');
                                // Assume the first row is the header row.
                                if (table.rows.length > 0) {
                                    thead.appendChild(table.rows[0]);
                                }
                                table.insertBefore(thead, table.firstChild);
                            }

                            // --- FIX 2: Ensure tables are wrapped for horizontal scrolling. ---
                            if (table.parentElement.className !== 'scrollable-table-wrapper') {
                                var wrapper = document.createElement('div');
                                wrapper.className = 'scrollable-table-wrapper';
                                table.parentNode.insertBefore(wrapper, table);
                                wrapper.appendChild(table);
                            }

                            // Initialize the Tablesort library.
                            new Tablesort(table);
                        });

                        console.log("Tablesort.js initialized on " + sortableTables.length + " table(s).");
                    });
                </script>
            </body>
            </html>
        """.trimIndent()
    }

    private fun readAsset(assetPath: String): String {
        return try {
            context.assets.open(assetPath).use { inputStream ->
                BufferedReader(InputStreamReader(inputStream)).use { reader ->
                    reader.readText()
                }
            }
        } catch (e: Exception) {
            android.util.Log.e("PageHtmlBuilder", "Failed to read asset: $assetPath", e)
            ""
        }
    }
}

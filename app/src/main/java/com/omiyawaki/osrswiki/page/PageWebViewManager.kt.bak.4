package com.omiyawaki.osrswiki.page

import android.annotation.SuppressLint
import android.graphics.Color
import android.util.Log
import android.webkit.ConsoleMessage
import android.webkit.WebChromeClient
import android.webkit.WebView
import com.omiyawaki.osrswiki.dataclient.WikiSite
import com.omiyawaki.osrswiki.theme.Theme

/**
 * Manages the configuration and rendering of content within the WebView.
 */
class PageWebViewManager(
    private val webView: WebView,
    private val linkHandler: PageLinkHandler,
    private val onPageReady: () -> Unit,
    private val onTitleReceived: (String) -> Unit
) {
    private val webViewDebugTag = "WebViewConsole"
    private var currentTheme: Theme = Theme.DEFAULT_LIGHT

    init {
        setupWebView()
    }

    @SuppressLint("SetJavaScriptEnabled")
    private fun setupWebView() {
        webView.webViewClient = object : AppWebViewClient(linkHandler) {
            override fun onPageFinished(view: WebView?, url: String?) {
                super.onPageFinished(view, url)
                applyStylingAndRevealBody()
            }
        }
        webView.webChromeClient = object : WebChromeClient() {
            override fun onReceivedTitle(view: WebView?, title: String?) {
                super.onReceivedTitle(view, title)
                title?.let { onTitleReceived(it) }
            }

            override fun onConsoleMessage(consoleMessage: ConsoleMessage?): Boolean {
                consoleMessage?.let {
                    val message = "[${it.sourceId()}:${it.lineNumber()}] ${it.message()}"
                    when (it.messageLevel()) {
                        ConsoleMessage.MessageLevel.ERROR -> Log.e(webViewDebugTag, message)
                        ConsoleMessage.MessageLevel.WARNING -> Log.w(webViewDebugTag, message)
                        else -> Log.i(webViewDebugTag, message)
                    }
                }
                return true
            }
        }
        webView.settings.javaScriptEnabled = true
        webView.setBackgroundColor(Color.TRANSPARENT)
    }

    fun render(fullHtml: String, baseUrl: String?, theme: Theme) {
        this.currentTheme = theme
        val finalBaseUrl = baseUrl ?: WikiSite.OSRS_WIKI.url()
        webView.loadDataWithBaseURL(finalBaseUrl, fullHtml, "text/html", "UTF-8", null)
    }

    private fun applyStylingAndRevealBody() {
        val themeClass = when (currentTheme) {
            Theme.OSRS_DARK -> "theme-osrs-dark"
            Theme.WIKI_LIGHT -> "theme-wikipedia-light"
            Theme.WIKI_DARK -> "theme-wikipedia-dark"
            Theme.WIKI_BLACK -> "theme-wikipedia-black"
            else -> ""
        }

        val applyThemeAndRevealBodyJs = """
            (function() {
                if (!document.body) return;
                document.body.classList.remove(
                    'theme-wikipedia-light', 'theme-osrs-dark',
                    'theme-wikipedia-dark', 'theme-wikipedia-black'
                );
                if ('$themeClass') {
                    document.body.classList.add('$themeClass');
                }
                document.body.style.visibility = 'visible';
            })();
        """.trimIndent()

        webView.evaluateJavascript(applyThemeAndRevealBodyJs) {
            onPageReady()
        }
    }
}
